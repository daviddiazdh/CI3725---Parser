
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTkOrleftTkAndleftTkEqualTkNEqualnonassocTkLessTkLeqTkGreaterTkGeqleftTkPlusTkMinusleftTkMultTkDivnonassocTkApprightTkNotTkAnd TkApp TkArrow TkAsig TkBool TkCBlock TkCBracket TkClosePar TkComma TkDiv TkEnd TkEqual TkFalse TkFi TkFunction TkGeq TkGreater TkGuard TkId TkIf TkInt TkLeq TkLess TkMinus TkMult TkNEqual TkNot TkNum TkOBlock TkOBracket TkOpenPar TkOr TkPlus TkPrint TkSemicolon TkSkip TkSoForth TkString TkTrue TkTwoPoints TkWhileprogram : TkOBlock declaration_list TkSemicolon statement_list TkCBlockdeclaration_list : declaration_list TkSemicolon declaration\n                        | declarationdeclaration : TkInt variable_list\n                   | TkBool variable_listdeclaration : TkFunction TkOBracket TkSoForth TkNum TkCBracket variable_listvariable_list : variable_list TkComma variable\n                     | variablevariable : TkIdstatement_list : statement_list TkSemicolon statement\n                      | statementstatement : TkId TkAsig expression\n                 | TkId TkAsig bool_expression\n                 | TkId TkAsig expression_list\n                 | TkId TkAsig function_modstatement : TkIf if_body TkFiif_body : bool_expression TkArrow statement_list\n                | if_body TkGuard bool_expression TkArrow statement_liststatement : TkWhile bool_expression TkArrow statement_list TkEndstatement : TkPrint expression\n                | TkPrint bool_expression\n                | TkPrint stringstatement : TkSkipstring : string TkPlus string\n                | string TkPlus expression\n                | expression TkPlus stringstring : TkStringstring : TkOpenPar TkString TkCloseParstatement : programexpression_list : expression_list TkComma expression\n                        | expressionexpression : expression TkPlus expression\n                | expression TkMinus expression\n                | expression TkMult expressionexpression : TkId TkApp expression\n                | function_mod TkApp expressionfunction_mod : TkId function_mod_listfunction_mod_list : function_mod_list TkOpenPar expression TkTwoPoints expression TkClosePar \n                        | TkOpenPar expression TkTwoPoints expression TkCloseParexpression : TkMinus expressionexpression : TkNumexpression : TkIdexpression : TkOpenPar expression TkCloseParbool_expression : bool_expression TkAnd bool_expression\n                    | bool_expression TkOr bool_expression\n                    | bool_expression TkEqual bool_expression\n                    | bool_expression TkNEqual bool_expression\n                    | TkNot bool_expression\n                    | expression TkLess expression\n                    | expression TkGreater expression\n                    | expression TkLeq expression\n                    | expression TkGeq expression\n                    | expression TkEqual expression\n                    | expression TkNEqual expression\n                    bool_expression : TkTrue\n                    | TkFalsebool_expression : TkIdbool_expression : TkOpenPar bool_expression TkClosePar'
    
_lr_action_items = {'TkOBlock':([0,8,25,56,80,119,],[2,2,2,2,2,2,]),'$end':([1,26,],[0,-1,]),'TkInt':([2,8,],[5,5,]),'TkBool':([2,8,],[6,6,]),'TkFunction':([2,8,],[7,7,]),'TkSemicolon':([3,4,9,10,11,12,14,15,16,21,22,26,32,33,34,38,40,41,42,43,45,46,48,49,50,51,52,54,61,72,76,77,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,108,109,110,111,113,114,116,117,118,122,124,127,129,130,],[8,-3,-4,-8,-9,-5,25,-2,-11,-23,-29,-1,-55,-56,-57,-41,-20,-21,-22,-42,-27,-7,-10,-12,-13,-14,-15,-16,-48,-37,-40,-42,25,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-32,-33,-34,-35,-58,-43,-36,25,-32,-26,-24,-25,-28,-6,-30,-19,25,-32,-39,-38,]),'TkId':([5,6,8,18,19,20,23,25,27,30,35,36,44,53,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,73,78,79,80,81,82,85,86,103,112,115,119,121,123,125,],[11,11,17,34,34,43,11,17,43,34,34,77,43,43,34,17,34,34,34,34,77,77,77,77,77,77,77,77,77,77,77,77,77,17,77,77,11,77,77,77,77,17,77,77,77,]),'TkOBracket':([7,],[13,]),'TkIf':([8,25,56,80,119,],[18,18,18,18,18,]),'TkWhile':([8,25,56,80,119,],[19,19,19,19,19,]),'TkPrint':([8,25,56,80,119,],[20,20,20,20,20,]),'TkSkip':([8,25,56,80,119,],[21,21,21,21,21,]),'TkComma':([9,10,11,12,38,43,46,49,51,76,77,99,100,101,102,106,108,117,118,],[23,-8,-9,23,-41,-42,-7,-31,86,-40,-42,-32,-33,-34,-35,-43,-36,23,-30,]),'TkSoForth':([13,],[24,]),'TkCBlock':([14,16,21,22,26,32,33,34,38,40,41,42,43,45,48,49,50,51,52,54,61,72,76,77,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,108,110,111,113,114,116,118,122,127,129,130,],[26,-11,-23,-29,-1,-55,-56,-57,-41,-20,-21,-22,-42,-27,-10,-12,-13,-14,-15,-16,-48,-37,-40,-42,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-32,-33,-34,-35,-58,-43,-36,-32,-26,-24,-25,-28,-30,-19,-32,-39,-38,]),'TkFi':([16,21,22,26,28,32,33,34,38,40,41,42,43,45,48,49,50,51,52,54,61,72,76,77,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,108,110,111,113,114,116,118,122,124,127,129,130,],[-11,-23,-29,-1,54,-55,-56,-57,-41,-20,-21,-22,-42,-27,-10,-12,-13,-14,-15,-16,-48,-37,-40,-42,-17,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-32,-33,-34,-35,-58,-43,-36,-32,-26,-24,-25,-28,-30,-19,-18,-32,-39,-38,]),'TkGuard':([16,21,22,26,28,32,33,34,38,40,41,42,43,45,48,49,50,51,52,54,61,72,76,77,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,108,110,111,113,114,116,118,122,124,127,129,130,],[-11,-23,-29,-1,55,-55,-56,-57,-41,-20,-21,-22,-42,-27,-10,-12,-13,-14,-15,-16,-48,-37,-40,-42,-17,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-32,-33,-34,-35,-58,-43,-36,-32,-26,-24,-25,-28,-30,-19,-18,-32,-39,-38,]),'TkEnd':([16,21,22,26,32,33,34,38,40,41,42,43,45,48,49,50,51,52,54,61,72,76,77,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,108,109,110,111,113,114,116,118,122,127,129,130,],[-11,-23,-29,-1,-55,-56,-57,-41,-20,-21,-22,-42,-27,-10,-12,-13,-14,-15,-16,-48,-37,-40,-42,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-32,-33,-34,-35,-58,-43,-36,122,-32,-26,-24,-25,-28,-30,-19,-32,-39,-38,]),'TkAsig':([17,],[27,]),'TkNot':([18,19,20,27,30,35,44,53,55,57,58,59,60,],[30,30,30,30,30,30,30,30,30,30,30,30,30,]),'TkTrue':([18,19,20,27,30,35,44,53,55,57,58,59,60,],[32,32,32,32,32,32,32,32,32,32,32,32,32,]),'TkFalse':([18,19,20,27,30,35,44,53,55,57,58,59,60,],[33,33,33,33,33,33,33,33,33,33,33,33,33,]),'TkOpenPar':([18,19,20,27,30,34,35,36,43,44,53,55,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,77,78,79,81,82,86,103,112,115,121,123,125,129,130,],[35,35,44,53,35,73,35,78,73,53,53,35,35,35,35,35,78,78,78,78,78,78,78,78,78,78,103,78,73,78,78,112,115,78,78,78,78,78,115,78,-39,-38,]),'TkMinus':([18,19,20,27,30,31,34,35,36,38,40,43,44,49,53,55,57,58,59,60,62,63,64,65,66,67,68,69,70,71,73,75,76,77,78,79,81,82,83,86,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,110,112,114,115,118,120,121,123,125,126,127,128,],[36,36,36,36,36,69,-42,36,36,-41,69,-42,36,69,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,69,-40,-42,36,36,36,36,69,36,69,69,69,69,69,69,-32,-33,-34,-35,36,69,-43,69,-36,-32,36,69,36,69,69,36,36,36,69,-32,69,]),'TkNum':([18,19,20,24,27,30,35,36,44,53,55,57,58,59,60,62,63,64,65,66,67,68,69,70,71,73,78,79,81,82,86,103,112,115,121,123,125,],[38,38,38,47,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'TkString':([20,44,81,82,112,115,123,],[45,84,45,45,84,84,45,]),'TkArrow':([29,32,33,34,38,39,61,76,77,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,108,],[56,-55,-56,-57,-41,80,-48,-40,-42,119,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-32,-33,-34,-35,-58,-43,-36,]),'TkAnd':([29,32,33,34,38,39,41,43,50,61,74,76,77,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,108,],[57,-55,-56,-57,-41,57,57,-57,57,-48,57,-40,-42,57,-44,57,-46,-47,-49,-50,-51,-52,-53,-54,-32,-33,-34,-35,-58,-43,-36,]),'TkOr':([29,32,33,34,38,39,41,43,50,61,74,76,77,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,108,],[58,-55,-56,-57,-41,58,58,-57,58,-48,58,-40,-42,58,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-32,-33,-34,-35,-58,-43,-36,]),'TkEqual':([29,31,32,33,34,38,39,40,41,43,49,50,61,74,75,76,77,83,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,108,110,],[59,66,-55,-56,-42,-41,59,66,59,-42,66,59,-48,59,66,-40,-42,66,59,59,59,-46,-47,-49,-50,-51,-52,-53,-54,-32,-33,-34,-35,-58,-43,-36,-32,]),'TkNEqual':([29,31,32,33,34,38,39,40,41,43,49,50,61,74,75,76,77,83,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,108,110,],[60,67,-55,-56,-42,-41,60,67,60,-42,67,60,-48,60,67,-40,-42,67,60,60,60,-46,-47,-49,-50,-51,-52,-53,-54,-32,-33,-34,-35,-58,-43,-36,-32,]),'TkLess':([31,34,38,40,43,49,75,76,77,83,99,100,101,102,106,108,110,],[62,-42,-41,62,-42,62,62,-40,-42,62,-32,-33,-34,-35,-43,-36,-32,]),'TkGreater':([31,34,38,40,43,49,75,76,77,83,99,100,101,102,106,108,110,],[63,-42,-41,63,-42,63,63,-40,-42,63,-32,-33,-34,-35,-43,-36,-32,]),'TkLeq':([31,34,38,40,43,49,75,76,77,83,99,100,101,102,106,108,110,],[64,-42,-41,64,-42,64,64,-40,-42,64,-32,-33,-34,-35,-43,-36,-32,]),'TkGeq':([31,34,38,40,43,49,75,76,77,83,99,100,101,102,106,108,110,],[65,-42,-41,65,-42,65,65,-40,-42,65,-32,-33,-34,-35,-43,-36,-32,]),'TkPlus':([31,34,38,40,42,43,45,49,75,76,77,83,93,94,95,96,97,98,99,100,101,102,104,106,107,108,110,111,113,114,116,118,120,126,127,128,],[68,-42,-41,81,82,-42,-27,68,68,-40,-42,68,68,68,68,68,68,68,-32,-33,-34,-35,68,-43,68,-36,-32,-26,-24,-25,-28,68,68,68,-32,68,]),'TkMult':([31,34,38,40,43,49,75,76,77,83,93,94,95,96,97,98,99,100,101,102,104,106,107,108,110,114,118,120,126,127,128,],[70,-42,-41,70,-42,70,70,70,-42,70,70,70,70,70,70,70,70,70,-34,-35,70,-43,70,-36,70,70,70,70,70,70,70,]),'TkClosePar':([32,33,34,38,43,61,74,75,76,77,83,84,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,107,108,126,128,],[-55,-56,-42,-41,-42,-48,105,106,-40,-42,106,116,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-32,-33,-34,-35,-58,-43,106,-36,129,130,]),'TkApp':([34,37,43,52,72,77,129,130,],[71,79,71,79,-37,71,-39,-38,]),'TkTwoPoints':([38,76,77,99,100,101,102,104,106,108,120,],[-41,-40,-42,-32,-33,-34,-35,121,-43,-36,125,]),'TkCBracket':([47,],[85,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,8,25,56,80,119,],[1,22,22,22,22,22,]),'declaration_list':([2,],[3,]),'declaration':([2,8,],[4,15,]),'variable_list':([5,6,85,],[9,12,117,]),'variable':([5,6,23,85,],[10,10,46,10,]),'statement_list':([8,56,80,119,],[14,88,109,124,]),'statement':([8,25,56,80,119,],[16,48,16,16,16,]),'if_body':([18,],[28,]),'bool_expression':([18,19,20,27,30,35,44,53,55,57,58,59,60,],[29,39,41,50,61,74,74,74,87,89,90,91,92,]),'expression':([18,19,20,27,30,35,36,44,53,55,57,58,59,60,62,63,64,65,66,67,68,69,70,71,73,78,79,81,82,86,103,112,115,121,123,125,],[31,31,40,49,31,75,76,83,83,31,31,31,31,31,93,94,95,96,97,98,99,100,101,102,104,107,108,110,114,118,120,107,107,126,127,128,]),'function_mod':([18,19,20,27,30,35,36,44,53,55,57,58,59,60,62,63,64,65,66,67,68,69,70,71,73,78,79,81,82,86,103,112,115,121,123,125,],[37,37,37,52,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'string':([20,81,82,123,],[42,111,113,111,]),'expression_list':([27,],[51,]),'function_mod_list':([34,43,77,],[72,72,72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> TkOBlock declaration_list TkSemicolon statement_list TkCBlock','program',5,'p_program','parser.py',39),
  ('declaration_list -> declaration_list TkSemicolon declaration','declaration_list',3,'p_declaration_list','parser.py',44),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',45),
  ('declaration -> TkInt variable_list','declaration',2,'p_declaration','parser.py',53),
  ('declaration -> TkBool variable_list','declaration',2,'p_declaration','parser.py',54),
  ('declaration -> TkFunction TkOBracket TkSoForth TkNum TkCBracket variable_list','declaration',6,'p_declaration_function','parser.py',58),
  ('variable_list -> variable_list TkComma variable','variable_list',3,'p_variable_list','parser.py',62),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',63),
  ('variable -> TkId','variable',1,'p_variable','parser.py',71),
  ('statement_list -> statement_list TkSemicolon statement','statement_list',3,'p_statement_list','parser.py',76),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',77),
  ('statement -> TkId TkAsig expression','statement',3,'p_statement_asig','parser.py',85),
  ('statement -> TkId TkAsig bool_expression','statement',3,'p_statement_asig','parser.py',86),
  ('statement -> TkId TkAsig expression_list','statement',3,'p_statement_asig','parser.py',87),
  ('statement -> TkId TkAsig function_mod','statement',3,'p_statement_asig','parser.py',88),
  ('statement -> TkIf if_body TkFi','statement',3,'p_statement_if','parser.py',92),
  ('if_body -> bool_expression TkArrow statement_list','if_body',3,'p_if_body','parser.py',96),
  ('if_body -> if_body TkGuard bool_expression TkArrow statement_list','if_body',5,'p_if_body','parser.py',97),
  ('statement -> TkWhile bool_expression TkArrow statement_list TkEnd','statement',5,'p_statement_while','parser.py',104),
  ('statement -> TkPrint expression','statement',2,'p_statement_print','parser.py',108),
  ('statement -> TkPrint bool_expression','statement',2,'p_statement_print','parser.py',109),
  ('statement -> TkPrint string','statement',2,'p_statement_print','parser.py',110),
  ('statement -> TkSkip','statement',1,'p_statement_skip','parser.py',114),
  ('string -> string TkPlus string','string',3,'p_string_binop','parser.py',118),
  ('string -> string TkPlus expression','string',3,'p_string_binop','parser.py',119),
  ('string -> expression TkPlus string','string',3,'p_string_binop','parser.py',120),
  ('string -> TkString','string',1,'p_string','parser.py',124),
  ('string -> TkOpenPar TkString TkClosePar','string',3,'p_string_parenthesis','parser.py',128),
  ('statement -> program','statement',1,'p_statement_program','parser.py',132),
  ('expression_list -> expression_list TkComma expression','expression_list',3,'p_expression_list','parser.py',136),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',137),
  ('expression -> expression TkPlus expression','expression',3,'p_expression_binop','parser.py',144),
  ('expression -> expression TkMinus expression','expression',3,'p_expression_binop','parser.py',145),
  ('expression -> expression TkMult expression','expression',3,'p_expression_binop','parser.py',146),
  ('expression -> TkId TkApp expression','expression',3,'p_expression_app','parser.py',150),
  ('expression -> function_mod TkApp expression','expression',3,'p_expression_app','parser.py',151),
  ('function_mod -> TkId function_mod_list','function_mod',2,'p_function_mod','parser.py',155),
  ('function_mod_list -> function_mod_list TkOpenPar expression TkTwoPoints expression TkClosePar','function_mod_list',6,'p_function_mod_list','parser.py',159),
  ('function_mod_list -> TkOpenPar expression TkTwoPoints expression TkClosePar','function_mod_list',5,'p_function_mod_list','parser.py',160),
  ('expression -> TkMinus expression','expression',2,'p_expression_unop','parser.py',167),
  ('expression -> TkNum','expression',1,'p_expression_num','parser.py',171),
  ('expression -> TkId','expression',1,'p_expression_id','parser.py',175),
  ('expression -> TkOpenPar expression TkClosePar','expression',3,'p_expression_parens','parser.py',179),
  ('bool_expression -> bool_expression TkAnd bool_expression','bool_expression',3,'p_bool_expression_binop','parser.py',183),
  ('bool_expression -> bool_expression TkOr bool_expression','bool_expression',3,'p_bool_expression_binop','parser.py',184),
  ('bool_expression -> bool_expression TkEqual bool_expression','bool_expression',3,'p_bool_expression_binop','parser.py',185),
  ('bool_expression -> bool_expression TkNEqual bool_expression','bool_expression',3,'p_bool_expression_binop','parser.py',186),
  ('bool_expression -> TkNot bool_expression','bool_expression',2,'p_bool_expression_binop','parser.py',187),
  ('bool_expression -> expression TkLess expression','bool_expression',3,'p_bool_expression_binop','parser.py',188),
  ('bool_expression -> expression TkGreater expression','bool_expression',3,'p_bool_expression_binop','parser.py',189),
  ('bool_expression -> expression TkLeq expression','bool_expression',3,'p_bool_expression_binop','parser.py',190),
  ('bool_expression -> expression TkGeq expression','bool_expression',3,'p_bool_expression_binop','parser.py',191),
  ('bool_expression -> expression TkEqual expression','bool_expression',3,'p_bool_expression_binop','parser.py',192),
  ('bool_expression -> expression TkNEqual expression','bool_expression',3,'p_bool_expression_binop','parser.py',193),
  ('bool_expression -> TkTrue','bool_expression',1,'p_bool_expression_def','parser.py',201),
  ('bool_expression -> TkFalse','bool_expression',1,'p_bool_expression_def','parser.py',202),
  ('bool_expression -> TkId','bool_expression',1,'p_bool_expression_id','parser.py',206),
  ('bool_expression -> TkOpenPar bool_expression TkClosePar','bool_expression',3,'p_bool_expression_parenthesis','parser.py',210),
]
